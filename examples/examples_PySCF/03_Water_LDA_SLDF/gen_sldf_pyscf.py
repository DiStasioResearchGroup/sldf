import sys
import os
import numpy as np
import pyscf

from sldf import calc_SLDF

mol = pyscf.gto.Mole()

mol.atom = '''
H    0.00000000    0.91087015    0.53855853
H    0.00000000   -0.88833620    0.55719192
O    0.00000000    0.00000000    1.29177249
'''
mol.basis   = 'ccpvtz'
mol.verbose = 10
mol.output  = 'pyscf.log'
mol.build()

# DFT settings
mf = mol.RKS(conv_tol=1e-12).density_fit()
mf.xc = 'lda,pw_mod'
mf.grids.atom_grid = (99, 590)
mf.grids.prune = None

# Run SCF 
mf.run()
dm = mf.make_rdm1()

# Grid information
coords = mf.grids.coords
weights = mf.grids.weights

# AO values
ao = pyscf.dft.numint.eval_ao(mol, coords, deriv=1)

# Electron density and gradients
rho, dx_rho, dy_rho, dz_rho = pyscf.dft.numint.eval_rho(mol, ao, dm, xctype='GGA')

# Evaluate reduced density gradient, s
s = np.sqrt(dx_rho ** 2 + dy_rho ** 2 + dz_rho ** 2) / (rho ** (4/3))

# Evaluate kinetic energy density, tau;
# Occupied orbitals
occ_orbs = mf.mo_coeff[:, mf.mo_occ > 0.]
# int tau dr = KE
tau = np.einsum('xgp,pi,xgq,qi->g', ao[1:], occ_orbs, ao[1:], occ_orbs)

nsp = 20
sldf = calc_SLDF(rho, s, weights, nsp)

np.savetxt('sldf.csv', sldf)

print('SLDF is')
print(sldf)

Ex_sldf = np.sum(sldf[:nsp])
Ec_sldf = np.sum(sldf[nsp:])

# Sanity check SLDF XC energies
ex, vx, _, _ = pyscf.dft.libxc.eval_xc('lda,', rho)
ec, vc, _, _ = pyscf.dft.libxc.eval_xc(',pw_mod', rho)

Ex = np.einsum('i,i,i->', ex, rho, weights)
Ec = np.einsum('i,i,i->', ec, rho, weights)

# Reference SLDF is generated by PySCF 2.10.0;
# Might be slightly different if other versions of PySCF are used
ref_sldf = np.array([
-2.69464770e-02, -9.13528739e-01, -2.59520313e+00, -2.08740134e+00,
-1.18297854e+00, -7.69974642e-01, -2.34501677e-01, -4.69132020e-02,
-2.81138359e-02, -1.79793672e-02, -1.16306351e-02, -7.73151632e-03,
-5.33107487e-03, -3.80324539e-03, -2.77529736e-03, -2.02760654e-03,
-1.42044113e-03, -8.12132459e-04, -2.19422953e-04, -9.23736414e-06,
-1.15443181e-06, -1.37318239e-05, -5.56720011e-05, -8.87732787e-05,
-1.12577692e-04, -1.98719213e-04, -2.45809900e-04, -3.16738723e-04,
-5.05485157e-04, -1.36603012e-03, -1.01879339e-02, -2.10946544e-02,
-2.10925073e-02, -2.55743751e-02, -3.66663176e-02, -5.22275665e-02,
-6.85347410e-02, -6.09246716e-02, -1.63212407e-02, -6.73003260e-04,
-3.89990940e-04, -2.25037334e-02, -7.58998713e-02, -7.48572527e-02,
-5.41363659e-02, -3.73998351e-02, -3.11936622e-02, -1.86850031e-02,
-6.43498888e-03, -4.04018739e-03, -2.94197661e-03, -2.10686215e-03,
-1.50201256e-03, -1.08649827e-03, -8.06679705e-04, -6.12167036e-04,
-4.62314370e-04, -3.02060118e-04, -9.52965891e-05, -4.58093972e-06
])

if not (np.allclose(Ex_sldf, Ex) and np.allclose(Ec_sldf, Ec)):
    raise ValueError("SLDF Exchange and Correlation are not consistent with LDA")
if np.allclose(ref_sldf, sldf):
    print('SLDF generation is successful!')
    print('SLDF is saved to sldf.csv')
    print(f'Sum of Exchange SLDF = {Ex_sldf:.3f}')
    print(f'Sum of Correlation SLDF = {Ec_sldf:.3f}')
else:
    print('SLDF generation is not consistent with SLDF generated by PySCF 2.10.0')
    print(f'Mean absolute difference is {np.mean(abs(ref_sldf - sldf)):.2e}')
