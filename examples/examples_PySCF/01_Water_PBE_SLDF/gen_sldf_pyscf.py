import sys
import os
import numpy as np
import pyscf

import sldf

mol = pyscf.gto.Mole()

mol.atom = '''
H    0.00000000    0.91087015    0.53855853
H    0.00000000   -0.88833620    0.55719192
O    0.00000000    0.00000000    1.29177249
'''
mol.basis   = 'ccpvtz'
mol.verbose = 10
mol.output  = 'pyscf.log'
mol.build()

# DFT settings
mf = mol.RKS(conv_tol=1e-12).density_fit()
mf.xc = 'pbe'
mf.grids.atom_grid = (99, 590)
mf.grids.prune = None

# Run SCF 
mf.run()
dm = mf.make_rdm1()

# Grid information
coords = mf.grids.coords
weights = mf.grids.weights

# AO values
ao = pyscf.dft.numint.eval_ao(mol, coords, deriv=1)

# Electron density and gradients
rho, dx_rho, dy_rho, dz_rho = pyscf.dft.numint.eval_rho(mol, ao, dm, xctype='GGA')

# Evaluate reduced density gradient, s
s = np.sqrt(dx_rho ** 2 + dy_rho ** 2 + dz_rho ** 2) / (rho ** (4/3))

# Evaluate kinetic energy density, tau;
# Occupied orbitals
occ_orbs = mf.mo_coeff[:, mf.mo_occ > 0.]
# int tau dr = KE
tau = np.einsum('xgp,pi,xgq,qi->g', ao[1:], occ_orbs, ao[1:], occ_orbs)

nsp = 20
sldf = sldf.calc_SLDF(rho, s, weights, nsp)

np.savetxt('sldf.csv', sldf)

print('SLDF is')
print(sldf)

Ex_sldf = np.sum(sldf[:nsp])
Ec_sldf = np.sum(sldf[nsp:])

# Sanity check SLDF XC energies
ex, vx, _, _ = pyscf.dft.libxc.eval_xc('lda,', rho)
ec, vc, _, _ = pyscf.dft.libxc.eval_xc(',pw_mod', rho)

Ex = np.einsum('i,i,i->', ex, rho, weights)
Ec = np.einsum('i,i,i->', ec, rho, weights)

# Reference SLDF is generated by PySCF 2.10.0;
# Might be slightly different if other versions of PySCF are used
ref_sldf = np.array([
-2.85489104e-02, -9.26217625e-01, -2.59313120e+00, -2.07925422e+00,
-1.17303907e+00, -7.72525327e-01, -2.53677361e-01, -4.96792615e-02,
-2.92295642e-02, -1.87653684e-02, -1.20952442e-02, -7.95331526e-03,
-5.41365187e-03, -3.82042545e-03, -2.76639745e-03, -2.01139419e-03,
-1.40500772e-03, -8.01356139e-04, -2.15904938e-04, -9.08393165e-06,
-1.19449302e-06, -1.40640309e-05, -5.61503799e-05, -9.03109030e-05,
-1.13323070e-04, -2.04984054e-04, -2.59937302e-04, -3.26877130e-04,
-5.39664789e-04, -1.80938922e-03, -1.17289027e-02, -2.06777941e-02,
-2.04877284e-02, -2.52323273e-02, -3.63656762e-02, -5.17445374e-02,
-6.80546432e-02, -6.13544384e-02, -1.67537388e-02, -6.85701729e-04,
-4.29819691e-04, -2.31824084e-02, -7.58422598e-02, -7.41412320e-02,
-5.36756085e-02, -3.70941336e-02, -3.08521633e-02, -1.94123652e-02,
-6.81598659e-03, -4.14989680e-03, -3.04548479e-03, -2.18800951e-03,
-1.55161769e-03, -1.10958901e-03, -8.13618724e-04, -6.11593553e-04,
-4.59158079e-04, -2.99006540e-04, -9.40468401e-05, -4.51128600e-06
])

if not (np.allclose(Ex_sldf, Ex) and np.allclose(Ec_sldf, Ec)):
    raise ValueError("SLDF Exchange and Correlation are not consistent with LDA")
if np.allclose(ref_sldf, sldf):
    print('SLDF generation is successful!')
    print('SLDF is saved to sldf.csv')
    print(f'Sum of Exchange SLDF = {Ex_sldf:.3f}')
    print(f'Sum of Correlation SLDF = {Ec_sldf:.3f}')
else:
    print('SLDF generation is not consistent with SLDF generated by PySCF 2.10.0')
    print(f'Mean absolute difference is {np.mean(abs(ref_sldf - sldf)):.2e}')
