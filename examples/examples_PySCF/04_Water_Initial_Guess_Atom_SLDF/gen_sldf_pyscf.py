import sys
import os
import numpy as np
import pyscf
from pyscf import dft

from sldf import calc_SLDF

mol = pyscf.gto.Mole()

mol.atom = '''
H    0.00000000    0.91087015    0.53855853
H    0.00000000   -0.88833620    0.55719192
O    0.00000000    0.00000000    1.29177249
'''
mol.basis   = 'ccpvtz'
mol.verbose = 10
mol.output  = 'pyscf.log'
mol.build()

dm = pyscf.scf.hf.init_guess_by_atom(mol)

# Grid settings
grids = pyscf.dft.gen_grid.Grids(mol)
grids.atom_grid = (99, 590)
grids.prune = None
grids.build()

# Grid information
coords = grids.coords
weights = grids.weights

# AO values
ao = pyscf.dft.numint.eval_ao(mol, coords, deriv=1)

# Electron density and gradients
rho, dx_rho, dy_rho, dz_rho = pyscf.dft.numint.eval_rho(mol, ao, dm, xctype='GGA')

# Evaluate reduced density gradient, s
s = np.sqrt(dx_rho ** 2 + dy_rho ** 2 + dz_rho ** 2) / (rho ** (4/3))

nsp = 20
sldf = calc_SLDF(rho, s, weights, nsp)

np.savetxt('sldf.csv', sldf)

print('SLDF is')
print(sldf)

Ex_sldf = np.sum(sldf[:nsp])
Ec_sldf = np.sum(sldf[nsp:])

# Sanity check SLDF XC energies
ex, vx, _, _ = pyscf.dft.libxc.eval_xc('lda,', rho)
ec, vc, _, _ = pyscf.dft.libxc.eval_xc(',pw_mod', rho)

Ex = np.einsum('i,i,i->', ex, rho, weights)
Ec = np.einsum('i,i,i->', ec, rho, weights)

# Reference SLDF is generated by PySCF 2.10.0;
# Might be slightly different if other versions of PySCF are used
ref_sldf = np.array([
-2.64051560e-02, -8.44413952e-01, -2.49888639e+00, -2.08432975e+00,
-1.12493663e+00, -7.75391906e-01, -3.15402247e-01, -4.89914640e-02,
-2.68328158e-02, -1.73311269e-02, -1.13070433e-02, -7.52750908e-03,
-5.23667582e-03, -3.76378266e-03, -2.72370319e-03, -1.90650946e-03,
-1.21836577e-03, -6.32087454e-04, -1.68711602e-04, -7.61958863e-06,
-4.77676131e-07, -7.42660896e-06, -2.68052767e-05, -3.91734554e-05,
-6.21513229e-05, -9.29920822e-05, -1.17370413e-04, -1.85217561e-04,
-2.62584136e-04, -2.48857859e-03, -1.36845973e-02, -1.59943991e-02,
-1.50030246e-02, -2.28039396e-02, -3.65949929e-02, -5.45440435e-02,
-6.94629812e-02, -6.21718378e-02, -1.71857044e-02, -6.67182690e-04,
-3.97186078e-04, -2.05875495e-02, -6.87342653e-02, -7.53389614e-02,
-5.58739499e-02, -3.66675594e-02, -2.93344902e-02, -2.22791912e-02,
-7.40745166e-03, -3.95242500e-03, -2.88664451e-03, -2.09814879e-03,
-1.50726247e-03, -1.10206198e-03, -8.27955577e-04, -6.28742161e-04,
-4.49832565e-04, -2.61159587e-04, -7.64376189e-05, -3.75596280e-06
])

if not (np.allclose(Ex_sldf, Ex) and np.allclose(Ec_sldf, Ec)):
    raise ValueError("SLDF Exchange and Correlation are not consistent with LDA")
if np.allclose(ref_sldf, sldf):
    print('SLDF generation is successful!')
    print('SLDF is saved to sldf.csv')
    print(f'Sum of Exchange SLDF = {Ex_sldf:.3f}')
    print(f'Sum of Correlation SLDF = {Ec_sldf:.3f}')
else:
    print('SLDF generation is not consistent with SLDF generated by PySCF 2.10.0')
    print(f'Mean absolute difference is {np.mean(abs(ref_sldf - sldf)):.2e}')
