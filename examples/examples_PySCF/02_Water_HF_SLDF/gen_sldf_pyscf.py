import sys
import os
import numpy as np
import pyscf

from sldf import calc_SLDF

mol = pyscf.gto.Mole()

mol.atom = '''
H    0.00000000    0.91087015    0.53855853
H    0.00000000   -0.88833620    0.55719192
O    0.00000000    0.00000000    1.29177249
'''
mol.basis   = 'ccpvtz'
mol.verbose = 10
mol.output  = 'pyscf.log'
mol.build()

# DFT settings
mf = mol.RKS(conv_tol=1e-12).density_fit()
mf.xc = 'hf'
mf.grids.atom_grid = (99, 590)
mf.grids.prune = None

# Run SCF 
mf.run()
dm = mf.make_rdm1()

# Grid information
coords = mf.grids.coords
weights = mf.grids.weights

# AO values
ao = pyscf.dft.numint.eval_ao(mol, coords, deriv=1)

# Electron density and gradients
rho, dx_rho, dy_rho, dz_rho = pyscf.dft.numint.eval_rho(mol, ao, dm, xctype='GGA')

# Evaluate reduced density gradient, s
s = np.sqrt(dx_rho ** 2 + dy_rho ** 2 + dz_rho ** 2) / (rho ** (4/3))

# Evaluate kinetic energy density, tau;
# Occupied orbitals
occ_orbs = mf.mo_coeff[:, mf.mo_occ > 0.]
# int tau dr = KE
tau = np.einsum('xgp,pi,xgq,qi->g', ao[1:], occ_orbs, ao[1:], occ_orbs)

nsp = 20
sldf = calc_SLDF(rho, s, weights, nsp)

np.savetxt('sldf.csv', sldf)

print('SLDF is')
print(sldf)

Ex_sldf = np.sum(sldf[:nsp])
Ec_sldf = np.sum(sldf[nsp:])

# Sanity check SLDF XC energies
ex, vx, _, _ = pyscf.dft.libxc.eval_xc('lda,', rho)
ec, vc, _, _ = pyscf.dft.libxc.eval_xc(',pw_mod', rho)

Ex = np.einsum('i,i,i->', ex, rho, weights)
Ec = np.einsum('i,i,i->', ec, rho, weights)

# Reference SLDF is generated by PySCF 2.10.0;
# Might be slightly different if other versions of PySCF are used
ref_sldf = np.array([
-3.38601380e-02, -9.71588844e-01, -2.58911922e+00, -2.03551861e+00,
-1.13395338e+00, -7.63282977e-01, -2.91620442e-01, -5.52786038e-02,
-3.00349772e-02, -1.95170855e-02, -1.26297828e-02, -8.26430174e-03,
-5.58021927e-03, -3.90023025e-03, -2.79702800e-03, -2.01733420e-03,
-1.40321412e-03, -8.06956052e-04, -2.21343341e-04, -9.40573608e-06,
-1.30870928e-06, -1.64843097e-05, -6.75915720e-05, -1.01502458e-04,
-1.36363755e-04, -2.22722095e-04, -2.69276864e-04, -3.79188047e-04,
-7.69713051e-04, -4.10225180e-03, -1.52262934e-02, -1.97751991e-02,
-1.97679333e-02, -2.47860735e-02, -3.60993703e-02, -5.04154534e-02,
-6.56563866e-02, -6.09586380e-02, -1.72853899e-02, -7.00306948e-04,
-5.72667767e-04, -2.57751180e-02, -7.73673801e-02, -7.27182371e-02,
-5.16818744e-02, -3.55847187e-02, -2.96108352e-02, -2.05008091e-02,
-7.60286331e-03, -4.19545725e-03, -3.11185608e-03, -2.25999350e-03,
-1.60545430e-03, -1.14159934e-03, -8.28862479e-04, -6.16416428e-04,
-4.58196250e-04, -2.98284054e-04, -9.51605166e-05, -4.64098548e-06
])

if not (np.allclose(Ex_sldf, Ex) and np.allclose(Ec_sldf, Ec)):
    raise ValueError("SLDF Exchange and Correlation are not consistent with LDA")
if np.allclose(ref_sldf, sldf):
    print('SLDF generation is successful!')
    print('SLDF is saved to sldf.csv')
    print(f'Sum of Exchange SLDF = {Ex_sldf:.3f}')
    print(f'Sum of Correlation SLDF = {Ec_sldf:.3f}')
else:
    print('SLDF generation is not consistent with SLDF generated by PySCF 2.10.0')
    print(f'Mean absolute difference is {np.mean(abs(ref_sldf - sldf)):.2e}')
